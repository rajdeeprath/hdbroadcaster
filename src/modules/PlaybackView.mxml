<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  backgroundColor="#000000" xmlns:ns1="com.flashvisions.camcorder.view.*" xmlns:components="com.flashvisions.components.*" 
		  width="100%" height="100%" currentState="{modelLocator.playbackState}" addedToStage="module1_addedToStageHandler(event)">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.flashvisions.camcorder.Protocol;
			import com.flashvisions.camcorder.event.StreamEvent;
			import com.flashvisions.camcorder.model.BroadcastModelLocator;
			import com.flashvisions.components.Alert;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			
			[Bindable]
			private var modelLocator:BroadcastModelLocator = BroadcastModelLocator.getInstance();
			private var destination:DynamicStreamingVideoSource;
			private var previewStream:DynamicStreamingVideoItem = new DynamicStreamingVideoItem();
			
			
			
			protected function module1_addedToStageHandler(event:Event):void
			{
				if(modelLocator.playbackState == BroadcastModelLocator.PREVIEWEXTERNAL)
				ChangeWatcher.watch(modelLocator,"playbackName", onPlaybackNameChanged);
				else if(modelLocator.playbackName && modelLocator.isConnected && (modelLocator.enablePreview || BroadcastModelLocator.APPLICATIONID == BroadcastModelLocator.CHATANYWHERE) && modelLocator.autoStart)
				CairngormEventDispatcher.getInstance().dispatchEvent(new StreamEvent(StreamEvent.STARTPLAYBACK,modelLocator.playbackName));
			}
			
			protected function onPreviewStateChanged(e:Event = null):void
			{
				if(modelLocator.playbackState == BroadcastModelLocator.PREVIEWEXTERNAL)
				{
					if(!modelLocator.enablePreview)
					{
						if(player.playing) player.stop();
						player.videoObject.clear();
						
						destination = player.source as DynamicStreamingVideoSource;
						destination.host = null;
						
						player.source = destination;
					}
				}
			}
				
			
			protected function player_mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
			{
				switch(event.state)
				{
					case "ready":
					player.play();
					break;
				}
			}
			
			private function onPlaybackNameChanged(event:Event = null):void
			{
				try
				{
					destination = player.source as DynamicStreamingVideoSource;
					destination.host = (modelLocator.playbackName && modelLocator.enablePreview)?modelLocator.playbackURL:null;
					
					previewStream = new DynamicStreamingVideoItem();
					previewStream.streamName = (modelLocator.playbackName && modelLocator.enablePreview)?modelLocator.playbackName:null;
					
					if(destination.streamItems.length>0) destination.streamItems.pop();
					destination.streamItems.push(previewStream);
					
					player.source = destination;
					
				}
				catch(e:Error)
				{
					if(player.playing) player.stop();
					player.videoObject.clear();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	
	<s:states>
		<s:State name="PreviewExternal" />
		<s:State name="PreviewInternal" />
	</s:states>
	
	<s:Group includeIn="PreviewExternal" width="100%" height="100%">
		<!--<ns1:VideoPlayer width="100%" height="100%" videoURL="{(modelLocator.protocol != Protocol.RTMFP)?modelLocator.videoURL:null}" id="player" />-->
		<s:VideoPlayer id="player" width="100%" height="100%" autoPlay="true" mediaPlayerStateChange="player_mediaPlayerStateChangeHandler(event)"  skinClass="com.flashvisions.skins.LiveStreamPlayer" scaleMode="stretch" muted="{!modelLocator.previewAudio}">
			<s:source>
				<s:DynamicStreamingVideoSource id="source"  streamType="live">
					<s:DynamicStreamingVideoItem id="stream" />
				</s:DynamicStreamingVideoSource>
			</s:source>
		</s:VideoPlayer>
	</s:Group>
	
	
	<s:Group includeIn="PreviewInternal" width="100%" height="100%" >
		<ns1:StreamPlayer width="100%" height="100%" Stream="{modelLocator.peerStream}"  id="p2pplayer" />
		<!--
		<s:HGroup horizontalCenter="0" verticalCenter="0">
			<s:Label text="NO PREVIEW FOR P2P STREAMS" color="#FFFFFF" fontSize="14"/>
			<s:Image source="@Embed(source='assets/warning.png')" />	
		</s:HGroup>
		-->
	</s:Group>
	
</s:Module>
