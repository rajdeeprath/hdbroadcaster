<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  currentState="{modelLocator.currentView}" xmlns:ns2="*" xmlns:view="com.flashvisions.camcorder.view.*" width="100%" height="100%" xmlns:liveness="com.flashvisions.camcorder.view.liveness.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="CameraView" />
		<s:State name="PlaybackView" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.flashvisions.camcorder.OperationMode;
			import com.flashvisions.camcorder.event.ApplicationEvent;
			import com.flashvisions.camcorder.event.BroadcastEvent;
			import com.flashvisions.camcorder.event.MicrophoneEvent;
			import com.flashvisions.camcorder.model.BroadcastModelLocator;
			import com.flashvisions.commercial.flex.LicenceType;
			
			import flash.net.navigateToURL;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			
			[Bindable]
			private var modelLocator:BroadcastModelLocator = BroadcastModelLocator.getInstance();
			
			
			[Embed(source="./assets/rtmp_world_logo.png")]
			[Bindable]
			public var defaultlogo:Class;
			
			private function init():void
			{
				CairngormEventDispatcher.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.STARTUP));
			}
			
			protected function cbxAutoSense_changeHandler(event:Event):void
			{
				/*
				if(!modelLocator.autosense)
				CairngormEventDispatcher.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.ACTIVATEAUTOSENSE));
				else
				CairngormEventDispatcher.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.DEACTIVATEAUTOSENSE));
				*/
			}
			
			protected function logoClickHandler(me:MouseEvent):void
			{
				if(modelLocator.appmode == LicenceType.REGISTERED)
					me.target.removeEventListener(MouseEvent.CLICK,logoClickHandler);
				else
					flash.net.navigateToURL(new URLRequest("http://rtmpworld.com"),"_blank");
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				CairngormEventDispatcher.getInstance().dispatchEvent(new MicrophoneEvent(MicrophoneEvent.SHOWECHOCONTROL));
			}

			
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				modelLocator.wasPublishing = false;
				CairngormEventDispatcher.getInstance().dispatchEvent(new BroadcastEvent(BroadcastEvent.BROADCASTSTOP));
			}
			
			
			
			protected function tglAllowAudio_clickHandler(event:MouseEvent):void
			{
				if(modelLocator.allowAudio)
				{
					CairngormEventDispatcher.getInstance().dispatchEvent(new BroadcastEvent(BroadcastEvent.DISABLEAUDIOBROADCAST));
				}
				else
				{
					CairngormEventDispatcher.getInstance().dispatchEvent(new BroadcastEvent(BroadcastEvent.ENABLEAUDIOBROADCAST));
				}
			}
			
			
			
			protected function button4_clickHandler(event:MouseEvent):void
			{
				modelLocator.wasPublishing = false;
				CairngormEventDispatcher.getInstance().dispatchEvent(new BroadcastEvent(BroadcastEvent.BROADCASTSTOP));
			}
			
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				CairngormEventDispatcher.getInstance().dispatchEvent(new BroadcastEvent(BroadcastEvent.BROADCASTSTART));
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	
	
	<s:VGroup id="CoreContainer" bottom="5" left="5" right="5" top="8">
		
		<s:HGroup width="100%" paddingLeft="10" paddingRight="10" minHeight="25">				
			
			<s:HGroup width="50%" horizontalAlign="center" includeIn="CameraView">
				<view:PresetPanel width="80%" />
			</s:HGroup>
			
			<s:Spacer width="10"/>			
			
			<s:HGroup  width="50%" verticalAlign="middle" includeIn="CameraView">
				<s:Button width="20" height="20" click="button1_clickHandler(event)"
						  fontWeight="normal" skinClass="com.flashvisions.skins.MicrophoneOptions" buttonMode="true" enabled="{modelLocator.isConnected &amp;&amp; modelLocator.allowAudio}"/>
				
				<view:VUMeter width="100%" height="2" value="{modelLocator.micActiivity/100}" enabled="{modelLocator.micActiivity>=0}" alpha="{(modelLocator.micActiivity>=0)?1:.2}" visible="{modelLocator.isBroadcasting}" />
				<!--<ns1:VolumeGauge height="2" width="195" value="{modelLocator.micActiivity/100}" enabled="{modelLocator.micActiivity>=0}" alpha="{(modelLocator.micActiivity>=0)?1:.2}" visible="{modelLocator.isBroadcasting}" /> -->
			</s:HGroup>
			
		</s:HGroup>		
		
		
		<view:CameraView width="100%" height="100%" includeIn="CameraView" />
		<view:PlaybackView width="100%" height="100%" includeIn="PlaybackView" />
		
		<liveness:Panels id="encodingpanels" width="100%" includeIn="CameraView"/>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#cccccc" weight="1" />
			</s:stroke>
		</s:Line>
		
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
			
			<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" gap="10">
				
				<s:Button label="Start" click="button3_clickHandler(event)" height="35" enabled="{(modelLocator.isConnected) &amp;&amp; (!modelLocator.isBroadcasting) &amp;&amp; ( (modelLocator.allowVideo &amp;&amp; modelLocator.mode == OperationMode.VIDEO) || (modelLocator.allowAudio &amp;&amp; modelLocator.mode == OperationMode.AUDIO) || ((modelLocator.allowVideo &amp;&amp; modelLocator.allowAudio) &amp;&amp; modelLocator.mode == OperationMode.DUPLEX)  || ((modelLocator.allowAudio || modelLocator.allowVideo) &amp;&amp; modelLocator.mode == null))}" width="200"/>
				<s:Button label="Stop" click="button4_clickHandler(event)" height="35" enabled="{modelLocator.isBroadcasting}" width="200"/>
				<!--<s:Spacer width="100%" />
				<s:ToggleButton id="tglAllowAudio" enabled="{!modelLocator.disableInteraction}" visible="{(modelLocator.mic != null)}" selected="{modelLocator.allowAudio}" height="35" width="80" label="Audio {(modelLocator.allowAudio)?'ON':'OFF'}" click="tglAllowAudio_clickHandler(event)"/>-->	
			</s:HGroup>
			
		</s:HGroup>
		
	</s:VGroup>
	
</s:Module>
